!pip install -q keras-ocr
pip install Pillow==9.0.0


import PIL
from PIL import Image
#import cv2
import csv
import keras_ocr
#import matplotlib.pyplot as plt
import pandas as pd

pipeline = keras_ocr.pipeline.Pipeline()


# Read images from folder path to image object
images = [keras_ocr.tools.read(img) for img in ['/content/Tabular_Data.png','/content/Tabular_Data.png']]
# img="/content/Tabular_Data.png"
# images = keras_ocr.tools.read(img)
# generate text predictions from the images
prediction_groups = pipeline.recognize(images)
"""
# plot the text predictions
fig, axs = plt.subplots(nrows=len(images), figsize=(10, 20))
for ax, image, predictions in zip(axs, images, prediction_groups):
    keras_ocr.tools.drawAnnotations(image=image, predictions=predictions, ax=ax)
"""

print(prediction_groups)


df=pd.DataFrame(prediction_groups[0], columns=['text', 'bbox'])


"""creating the cordinates into numpy array"""
import numpy as np
coordinates=np.array(df.bbox)
coordinates=np.array(sorted(coordinates, key=lambda coordinates : (int(coordinates[0][1]),int(coordinates[0][0]))))
df2=pd.DataFrame()
s=pd.Series([x for x in coordinates])
df2['bbox']=s
print(coordinates)


"""partioning the numpy array inot row bses"""
partition_by_rows=[]
row=[df2.values[0][0]]
next_val=df2.values[1][0]
count=len(df2)
row_count=0
duplicate=0
while row_count<count-1:
  while ((row[-1][1][1])-10<=next_val[0][1]).all() and ((row[-1][1][1])+10>=next_val[0][1]).all():
    if duplicate==0:
      row.append(next_val)
    row_count+=1
    if row_count<count-1:
      next_val=df2.values[row_count+1][0]
      duplicate=0
    else:
      break
  partition_by_rows.append(row)
  if row_count<count-1:
    row=[next_val]
    duplicate=1

#print(partition_by_rows)

"""Sorting the cordinates on the bases of row"""
sorted_partitions=[]
to_sort=list(partition_by_rows)
for row in to_sort:
  # print(row[0])
  # print(row[0][0])
  # break
  for i in range(1, len(row)):
      key = row[i]
      # Move elements of arr[0..i-1], that are
      # greater than key, to one position ahead
      # of their current position
      j = i-1
      while j >=0 and key[0][0]< row[j][0][0] :
              row[j+1] = row[j]
              j -= 1
      row[j+1] = key
  sorted_partitions.append(row)
print(sorted_partitions[1])


# ordering the data to a list manner
data=[]
df_values=df.values
for row in sorted_partitions:
  data_row=[]
  for item in row:
    for x in df_values:
      if (item==x[1]).all():
        data_row.append(x[0])
        print(x[0],end="->")
        break
  data.append(data_row)
  data_row=[]
  print()
print(data)

# generating the final data in series order
final_data=[]
for row_data in zip(sorted_partitions, data):
  row_data_lst=[]
  count=0
  merge_count=0
  for item in zip(row_data[0],row_data[1]):
    count+=1
    if merge_count>0:
      merge_count-=1
      continue
    row_data_lst.append(item[1])    
    for item2 in zip(row_data[0][count:],row_data[1][count:]):
      if (item[0]!=item2[0]).all() and item[0][1][0]-15<=item2[0][0][0]<=item[0][1][0]+15 :
        row_data_lst[-1]+=" "+item2[1]
        merge_count+=1
  final_data.append(row_data_lst)
print(final_data


final_df=pd.DataFrame(final_data[1:],columns=final_data[0])
print(final_df)


final_df.to_excel("/content/output.xlsx", index=False)
